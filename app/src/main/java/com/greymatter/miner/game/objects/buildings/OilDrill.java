package com.greymatter.miner.game.objects.buildings;import com.greymatter.miner.animators.BooleanAnimator;import com.greymatter.miner.animators.OnAnimationFrameHandler;import com.greymatter.miner.animators.ValueAnimator;import com.greymatter.miner.game.GameInstance;import com.greymatter.miner.game.objects.GameInstanceGroup;import com.greymatter.miner.game.objects.GameObject;import com.greymatter.miner.game.objects.base.IGameObject;import com.greymatter.miner.helpers.VectorHelper;import com.greymatter.miner.helpers.ZHelper;import com.greymatter.miner.helpers.touchListeners.OilDrillJointTouchListener;import com.greymatter.miner.loaders.enums.definitions.DrawableDef;import com.greymatter.miner.mainui.touch.OnTouchListener;import com.greymatter.miner.opengl.objects.Transforms;import com.greymatter.miner.opengl.objects.drawables.Drawable;import java.util.ArrayList;import javax.vecmath.Vector2f;import javax.vecmath.Vector3f;public class OilDrill extends GameBuilding {    private static final String PIPES_INS_GROUP = "pipes_ig";    private static final String JOINTS_INS_GROUP = "joints_ig";    private GameInstanceGroup pipelineGroup, jointIndicators;    private ArrayList<IGameObject> currentlyConnectedOilDeposits;    public OilDrill(Drawable drawable) {        super(drawable.getId(), drawable);        initialize();    }    public OilDrill(String id, Drawable drawable) {        super(id, drawable);        initialize();    }    public OilDrill(String id) {        super(id, DrawableDef.create(DrawableDef.OIL_DRILL));        initialize();    }    private void initialize() {        this.currentlyConnectedOilDeposits = new ArrayList<>();        this.pipelineGroup = new GameInstanceGroup(DrawableDef.create(DrawableDef.PIPES_INSTANCE_GROUP));        this.pipelineGroup.moveTo(0f,0f, ZHelper.FRONT);        this.addChild(PIPES_INS_GROUP, pipelineGroup);        this.jointIndicators = new GameInstanceGroup(DrawableDef.create(DrawableDef.JOINTS_INSTANCE_GROUP));        this.jointIndicators.moveTo(0f,0f, ZHelper.OVER_FRONT);        this.addChild(JOINTS_INS_GROUP, jointIndicators);        GameObject firstJointInstance = jointIndicators.createAndAddInstance();        firstJointInstance.setCircularRB();        firstJointInstance.setOnTouchListener(new OilDrillJointTouchListener());        firstJointInstance.moveTo(0f,0f, 20f);        firstJointInstance.scaleTo(0.3f,0.3f);        this.jointIndicators.setAnimator(new BooleanAnimator().withFPS(10).setOnAnimationFrameHandler(new OnAnimationFrameHandler() {            @Override            public void onAnimationFrame(GameObject object, ValueAnimator animator) {                for (int i = 0; i < jointIndicators.getTotalInstances(); i++) {                    jointIndicators.getInstance(i).getTransforms().rotateBy(0f,0f,10f);                }            }        }));    }    @Override    public void onFrameUpdate() {        super.onFrameUpdate();        jointIndicators.getAnimator().update();    }    @Override    public void onTransformsChanged() {        super.onTransformsChanged();        if(jointIndicators!=null) {            Vector3f scale = getTransforms().getScale();            float drillRotation = getTransforms().getRotation().z;            Vector2f ptToRotate = new Vector2f(-(scale.x-scale.x*0.33f) , -scale.y);            ptToRotate = VectorHelper.rotateAroundZ(ptToRotate, (float)Math.toRadians(drillRotation));            jointIndicators.getInstance(0).moveTo(getLocation().x + ptToRotate.x,                    getLocation().y + ptToRotate.y);        }    }    public GameInstance addInstance() {        GameInstance newInstance = pipelineGroup.createAndAddInstance();        newInstance.getTransforms().setTranslationTransformationOffset(new Vector3f(1f,0f,0f));        newInstance.getTransforms().scaleTo(0f,0.3f);        return newInstance;    }    public GameInstanceGroup getJointIndicators() {        return jointIndicators;    }    public GameInstanceGroup getPipelineGroup() {        return pipelineGroup;    }}